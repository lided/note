import{_ as e,c as l,o as t,ag as o}from"./chunks/framework.DPDPlp3K.js";const _=JSON.parse('{"title":"可见性","description":"","frontmatter":{},"headers":[],"relativePath":"java/juc/volatile.md","filePath":"java/juc/volatile.md"}'),i={name:"java/juc/volatile.md"};function r(n,a,h,d,s,c){return t(),l("div",null,a[0]||(a[0]=[o('<h1 id="可见性" tabindex="-1">可见性 <a class="header-anchor" href="#可见性" aria-label="Permalink to &quot;可见性&quot;">​</a></h1><p>当一个变量被定义为volatile时,写操作会把线程本地内存中的值立即写回主内存,读操作会直接从主内存中获取</p><h1 id="有序性" tabindex="-1">有序性 <a class="header-anchor" href="#有序性" aria-label="Permalink to &quot;有序性&quot;">​</a></h1><h2 id="重排序" tabindex="-1">重排序 <a class="header-anchor" href="#重排序" aria-label="Permalink to &quot;重排序&quot;">​</a></h2><h2 id="内存屏障" tabindex="-1">内存屏障 <a class="header-anchor" href="#内存屏障" aria-label="Permalink to &quot;内存屏障&quot;">​</a></h2><h2 id="读屏障" tabindex="-1">读屏障 <a class="header-anchor" href="#读屏障" aria-label="Permalink to &quot;读屏障&quot;">​</a></h2><p>在读指令之前插入读屏障,缓存失效,从主内存中获取</p><h2 id="写屏障" tabindex="-1">写屏障 <a class="header-anchor" href="#写屏障" aria-label="Permalink to &quot;写屏障&quot;">​</a></h2><p>在写指令之后插入写屏障,强制将独立内存(缓存)中的数据写回主内存</p><h2 id="四大指令" tabindex="-1">四大指令 <a class="header-anchor" href="#四大指令" aria-label="Permalink to &quot;四大指令&quot;">​</a></h2><ul><li><strong>StoreStore</strong> volatile写操作前面插入</li><li><strong>Storeload</strong> volatile写操作后面插入</li><li><strong>LoadLoad</strong> volatile读操作后面插入</li><li><strong>LoadStore</strong> volatile读操作后面插入</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ol><li>volatile写之前的操作禁止重排到后</li><li>volatile读之后的操作禁止重排到前</li><li>volatile写之后volatile读禁止重排</li></ol><h1 id="没有原子性" tabindex="-1">没有原子性! <a class="header-anchor" href="#没有原子性" aria-label="Permalink to &quot;没有原子性!&quot;">​</a></h1><h1 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h1><ol><li>单一赋值,(没有原子性,对于i++等复合运算不适用)</li><li>状态标志,判断业务是否结束</li><li>读操作远多于写,可以在该变量的写操作上加锁保证弥补原子性</li><li>DCL双端锁</li></ol>',16)]))}const b=e(i,[["render",r]]);export{_ as __pageData,b as default};
