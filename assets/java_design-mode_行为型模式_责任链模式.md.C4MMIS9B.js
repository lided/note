import{_ as s,c as i,o as e,ag as t}from"./chunks/framework.DPDPlp3K.js";const n="/assets/Pasted%20image%2020240420110634.B7Aoyxc4.png",g=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[],"relativePath":"java/design-mode/行为型模式/责任链模式.md","filePath":"java/design-mode/行为型模式/责任链模式.md"}'),l={name:"java/design-mode/行为型模式/责任链模式.md"};function r(p,a,h,d,o,k){return e(),i("div",null,a[0]||(a[0]=[t(`<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><p><strong>让多个处理类处理某个请求</strong></p><h2 id="实际场景" tabindex="-1">实际场景 <a class="header-anchor" href="#实际场景" aria-label="Permalink to &quot;实际场景&quot;">​</a></h2><p>javax.servlet.Filter#doFilter()</p><h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h2><ul><li>将请求与处理解耦</li><li>简化处理对象,无需知道其他对象</li><li>动态增删处理逻辑</li></ul><h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h2><ul><li>并不一定会被执行,有可能所有处理都不适用(可以通过默认处理解决)</li><li>方法嵌套过多,不容易纠错</li></ul><h1 id="示例场景" tabindex="-1">示例场景 <a class="header-anchor" href="#示例场景" aria-label="Permalink to &quot;示例场景&quot;">​</a></h1><p>有一个请求传入传入用户id,username值(非必须)来查询唯一用户信息</p><p>Request.java</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Integer id;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String username;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Handler</p><p><img src="`+n+'" alt=""></p><p>当接收到请求后,会从IdHandler开始处理,如果无法处理传给下一个...</p>',15)]))}const u=s(l,[["render",r]]);export{g as __pageData,u as default};
