import{_ as e,c as t,o as r,ag as o}from"./chunks/framework.DPDPlp3K.js";const p=JSON.parse('{"title":"一锁","description":"","frontmatter":{},"headers":[],"relativePath":"java/juc/大纲.md","filePath":"java/juc/大纲.md"}'),i={name:"java/juc/大纲.md"};function h(n,a,l,d,s,c){return r(),t("div",null,a[0]||(a[0]=[o('<h1 id="一锁" tabindex="-1">一锁 <a class="header-anchor" href="#一锁" aria-label="Permalink to &quot;一锁&quot;">​</a></h1><h1 id="二并" tabindex="-1">二并 <a class="header-anchor" href="#二并" aria-label="Permalink to &quot;二并&quot;">​</a></h1><h2 id="并发" tabindex="-1">并发 <a class="header-anchor" href="#并发" aria-label="Permalink to &quot;并发&quot;">​</a></h2><p>一台处理器同时处理多个任务</p><h2 id="并行" tabindex="-1">并行 <a class="header-anchor" href="#并行" aria-label="Permalink to &quot;并行&quot;">​</a></h2><p>多台处理器同时处理多个任务(各自独立)</p><h1 id="三程" tabindex="-1">三程 <a class="header-anchor" href="#三程" aria-label="Permalink to &quot;三程&quot;">​</a></h1><h2 id="进程" tabindex="-1">进程 <a class="header-anchor" href="#进程" aria-label="Permalink to &quot;进程&quot;">​</a></h2><p>运行中的一个应用程序</p><h2 id="线程" tabindex="-1">线程 <a class="header-anchor" href="#线程" aria-label="Permalink to &quot;线程&quot;">​</a></h2><p>同一个进程中会有多个线程</p><h2 id="管程" tabindex="-1">管程 <a class="header-anchor" href="#管程" aria-label="Permalink to &quot;管程&quot;">​</a></h2><p>用来保证同一时间只有一个线程访问的对象</p><p>JVM中是Monitor对象实现,每一个对象都有一个Monitor对象,同Java对象一同产生,销毁</p>',14)]))}const _=e(i,[["render",h]]);export{p as __pageData,_ as default};
